
import { GoogleGenAI, Type, GenerateContentResponse } from "@google/genai";

if (!process.env.API_KEY) {
    throw new Error("API_KEY environment variable not set");
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

export const splitScriptIntoScenes = async (script: string): Promise<string[]> => {
  try {
    const prompt = `Analyze the following story script and split it into distinct scenes suitable for a storyboard. For each scene, provide a concise, descriptive prompt for an AI image generator to create a visual representation. The style should be cinematic and evocative. Focus on key actions, characters, and settings. Output only a JSON array of strings, where each string is a prompt for an image generator.

    Script:
    ---
    ${script}
    ---
    `;

    const response: GenerateContentResponse = await ai.models.generateContent({
      model: "gemini-2.5-flash",
      contents: prompt,
      config: {
        responseMimeType: "application/json",
        responseSchema: {
          type: Type.ARRAY,
          items: {
            type: Type.STRING,
            description: "A concise, descriptive prompt for an AI image generator."
          }
        },
      },
    });

    const jsonString = response.text.trim();
    const prompts = JSON.parse(jsonString);
    
    if (!Array.isArray(prompts) || !prompts.every(p => typeof p === 'string')) {
        throw new Error("API did not return a valid array of strings.");
    }
    return prompts;

  } catch (error) {
    console.error("Error splitting script into scenes:", error);
    throw new Error("Failed to analyze the script. The AI model might be unavailable or the script format could be invalid.");
  }
};


export const generateImageForPrompt = async (prompt: string): Promise<string> => {
    try {
        const response = await ai.models.generateImages({
            model: 'imagen-4.0-generate-001',
            prompt: `cinematic, high detail, photographic, ${prompt}`,
            config: {
                numberOfImages: 1,
                outputMimeType: 'image/jpeg',
                aspectRatio: '16:9',
            },
        });

        if (response.generatedImages && response.generatedImages.length > 0 && response.generatedImages[0].image.imageBytes) {
            const base64ImageBytes = response.generatedImages[0].image.imageBytes;
            return `data:image/jpeg;base64,${base64ImageBytes}`;
        }
        throw new Error("No image was generated by the API.");
    } catch (error) {
        console.error("Error generating image:", error);
        throw new Error("Failed to generate image. The prompt might be unsafe or the service may be down.");
    }
};
